<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 PUBLIC "" ".//reference.RFC.2119.xml">
]>
<!-- WK: Set category, IPR, docName -->
<rfc category="std" docName="draft-wkumari-dnsop-multiple-responses-02"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc="yes" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>

  <?rfc iprnotified="no" ?>

  <?rfc strict="yes"?>

  <?rfc compact="yes" ?>

  <front>
    <!-- WK: Set long title. -->

    <title abbrev="DNS Multiple Answers">Returning multiple answers in DNS
    responses.</title>

    <author fullname="Warren Kumari" initials="W." surname="Kumari">
      <organization>Google</organization>

      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>

          <city>Mountain View, CA</city>

          <code>94043</code>

          <country>US</country>
        </postal>

        <email>warren@kumari.net</email>
      </address>
    </author>

    <author fullname="Zhiwei Yan" initials="Z." surname="Yan">
      <organization>CNNIC</organization>

      <address>
        <postal>
          <street>No.4 South 4th Street, Zhongguancun</street>

          <city>Beijing</city>

          <code>100190</code>

          <country>P. R. China</country>
        </postal>

        <email>yanzhiwei@cnnic.cn</email>
      </address>
    </author>

    <author fullname="Wes Hardaker" initials="W." surname="Hardaker">
      <organization>Parsons, Inc.</organization>

      <address>
        <postal>
          <street>P.O. Box 382</street>

          <city>Davis, CA</city>

          <code>95617</code>

          <country>US</country>
        </postal>

        <email>ietf@hardakers.net</email>
      </address>
    </author>

    <date day="05" month="January" year="2016"/>

    <area>template</area>

    <workgroup>dnsop</workgroup>

    <abstract>
      <t>This document (re)introduces the ability to provide multiple answers
      in a DNS response.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Often the name being resolved in the DNS provides information about
      why the name is being resolved, allowing the nameserver to predict what
      other answers the client will soon query for. By providing multiple
      answers in the response, the authoritative name server operator can
      ensure that the recursive server that the client is using has all the
      answers in its cache.</t>

      <t>For example, the name server operator of Example Widgets, Inc
      (example.com) knows that the example.com web page at www.example.com
      contains various other resources, including some images (served from
      images.example.com), some Cascading Style Sheets (served from
      css.example.com) and some JavaScript (data.example.com). A client
      attempting to resolve www.example.com is very likely to be a web browser
      rendering the page and so will need to also resolve all of the other
      names to obtain these other resources. Providing all of these answers in
      response to a query for www.example.com allows the recursive server to
      populate its cache and have all of the answers available when the client
      asks for them.</t>

      <t>Other examples where this technique is useful include SMTP (including
      the mail server address when serving the MX record), SRV (providing the
      target information in addition to the SRV response) and TLSA (providing
      any TLSA records associated with a name).</t>

      <t>This is purely an optimization - by providing all of other, related
      answers that the client is likely to need along with the answer that
      they requested, users get a better experience, iterative servers need to
      perform less queries, authoritative servers have to answer fewer
      queries, etc.</t>

      <t/>

      <section title="Requirements notation">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119"/>.</t>
      </section>
    </section>

    <section title="Background">
      <t>The existing DNS specifications allow for additional information to
      be included in the "additional" section of the DNS response, but in
      order to defeat cache poisoning attacks most implementations either
      ignore or don't trust additional information (other than for "glue").
      For some more background, see <xref target="Ref.Bellovin"/>, <xref
      target="RFC1034"/>, <xref target="RFC2181"/>.</t>

      <t>Not trusting the information in the additional section was necessary
      because there was no way to authenticate it. If you queried for
      www.example.com and got back answers for www.invalid.com you couldn't
      tell if these were actually from invalid.com or if an attacker was
      trying to get bad information for invalid.com into your cache. In a
      world of ubiquitous DNSSEC deployment [Ed note: By the time this
      document is published, there *will* be ubiquitous DNSSEC :-) ] the
      iterative server can validate the information and trust it.</t>

      <t/>
    </section>

    <section title="Terminology">
      <t><list style="hanging">
          <t hangText="Additional records">Additional records are records that
          the authoritative nameserver has included in the Additional
          section.</t>

          <t hangText="Primary query">A Primary query (or primary question) is
          a QNAME that the name server operator would like to return
          additional answers for.</t>

          <t hangText="Supporting information">Supporting information is the
          DNSSEC RRSIGs that prove the authenticity of the Additional
          records.</t>
        </list></t>
    </section>

    <section title="Returning multiple answers">
      <t>The authoritative nameserver should include as many of the instructed
      Additional records and Supporting information as will fit in the
      response packet.</t>

      <t>In order to include Additional records in a response, certain
      conditions need to be met. [Ed note: Some discussion on each rule is
      below]</t>

      <t><list style="numbers">
          <t>Additional records MUST only be included when the primary name
          and each additional record are signed using DNSSEC "valid".</t>

          <t>Additional records MUST only be served over TCP connections, or
          when DNS Cookies [ToDo: Ref] are in use. This is to mitigate Denial
          of Service reflection attacks.[1]</t>

          <t>Additional records SHOULD be contained within the same zone as
          the primary name[2], or MAY be additionally be contained within a
          child zone for which the name server is authoritative for, assuming
          all DNSSEC validation records required to validate the child(ren)
          are included as well. Note that the DS record, and NS and glue
          records for a child zone may be returned even when no other
          additional data for the child will be included.</t>

          <t>The DNSSEC supporting information necessary to perform validation
          on the records must be included. I.E., the RRSIGs required to
          validate the Additional record information must be included.</t>

          <t>The authoritative nameserver SHOULD include as many of the
          additional records as will fit in the response. Each Additional
          record MUST have its matching Supporting information. Additional
          records MUST be inserted in the order specified in the Additional
          records list.</t>

          <t>Operators SHOULD only include Additional answers that they expect
          a client to actually need. [3]</t>
        </list></t>

      <t>[Ed note 1: The above MAY be troll bait. I'm not really sure if this
      is a good idea or not - moving folk towards TCP is probably a good idea,
      and this is somewhat of an optional record type. Then again, special
      handing (TCP only) for a record would be unusual. Additional records
      could cause responses to become really large, but there are already
      enough large records that can be used for reflection attacks that we can
      just give up on the whole "keep responses as small as possible" ship.
      ]</t>

      <t>[Ed note 2: This is poorly worded. I mumbled about bailiwick,
      subdomains, etc but nothing I could come up with was better. Also, is
      this rule actually needed? I *think* it would be bad for .com servers to
      be able to include Additional records for www.foo.bar.baz.example.com,
      but perhaps &lt;handwave&gt;public-suffix-list?! This rule also makes it
      easier to decide what all DNSSEC information is required.]</t>

      <t>[Ed note 3: This is not enforceable. ]</t>
    </section>

    <section title="Additional records pseudo-RR">
      <t>To allow the authoritative nameserver operator to configure the name
      server with the additional records to serve when it receives a query to
      a label, we introduce the Additional Resource Record (RR).</t>

      <section title="File Format">
        <t>The format of the Additional RR is:</t>

        <t>label ADD "label,type; label,type; label,type; ..."</t>

        <t>For example, if the operator of example.com would like to also
        return A record answers for images.example.com, css.html.example.com
        and both an A and AAAA for data.example.com when queried for
        www.example.com he would enter:</t>

        <t>www ADD "images,A; css.html,A; data,A; data,AAA;"</t>

        <t>The entries in the ADD list are ordered. An authoritative
        nameserver SHOULD insert the records in the order listed when filling
        the response packet. This is to allow the operator to express a
        preference in case all the records to not fit. The TTL of the records
        added to the Additional section are MUST be the same as if queried
        directly.</t>

        <t>In some cases the operator might not know what all additional
        records clients need. For example, the owner of www.example.com may
        have outsourced his DNS operations to a third party. DNS operators may
        be able to mine their query logs, and see that, in a large majority of
        cases, a recursive server asks for foo.example.com and then very soon
        after asks for bar.example.com, and so may decide to optimize this by
        opportunistically returning bar when queried for foo. This
        functionality could also be included in the authoritative name server
        software itself, but discussions of these re outside the scope of this
        document.</t>
      </section>

      <section title="Wire Format">
        <t>The wire format of the Additional RR is the same as the wire format
        for a TXT RR:</t>

        <t><figure>
            <artwork><![CDATA[
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    /                   TXT-DATA                    /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
              ]]></artwork>
          </figure></t>

        <t>Where TXT-DATA is one or more charter-strings.</t>

        <t>The Additional RR has RR type TBD [RFC Editor: insert the IANA
        assigned value and delete this note]</t>
      </section>
    </section>

    <section anchor="signaling" title="Signaling support">
      <t>Iterative nameservers that support Additional records signal this by
      setting the OPT record's PL ("plus") bit (bit NN [TBD: assigned by IANA]
      in the EDNS0 extension header to 1.</t>
    </section>

    <section title="Stub-Resolver Considerations">
      <t>No modifications need to be made to stub-resolvers to get the
      predominate benefit of this protocol, since the majority of the speed
      gain will take place between the validating recursive resolver and the
      authoritative name server. However, stub resolvers may wish to query
      directly for the Additional RR if it wants to pre-query for data that
      will likely be needed in the process of supporting its application.</t>
    </section>

    <section title="Use of Additional information">
      <t>When receiving Additional information, an iterative server follows
      certain rules:</t>

      <t><list style="numbers">
          <t>Additional records MUST be validated before being used.</t>

          <t>Additional records SHOULD be annotated in the cache as having
          been received as Additional records.</t>

          <t>Additional records SHOULD have lower priority in the cache than
          answers received because they were requested. This is to help evict
          Additional records from the cache first, and help stop cache filling
          attacks.</t>

          <t>Iterative servers MAY choose to ignore Additional records for any
          reason, including CPU or cache space concerns, phase of the moon,
          etc. It may choose to only accept all, some or none of the
          Additional records.</t>
        </list></t>
    </section>

    <section title="IANA Considerations">
      <t>This document contains the following IANA assignment
      requirements:</t>

      <t><list style="numbers">
          <t>The PL bit discussed in <xref target="signaling"/> needs to be
          allocated.</t>
        </list></t>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>Additional records will make DNS responses even larger than they are
      currently, leading to more large records that can be used for DNS
      reflection attacks. We mitigate this by only serving these over TCP.</t>

      <t>A malicious authoritative server could include a large number of
      Additional records (and associated DNSSEC information) and attempt to
      DoS the recursive by making it do lots of DNSSEC validation. I don't
      view this as a very serious threat (CPU for validation is cheap compared
      to bandwidth), but we mitigate this by allowing the iterative to ignore
      Additional records whenever it wants.</t>

      <t>By requiring the ALL of the Additional records are signed, and all
      necessary DNSSEC information for validation be included we avoid cache
      poisoning (I hope :-))</t>
    </section>

    <section title="Acknowledgements">
      <t>The authors wish to thank some folk.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2119'
?>

      <?rfc include='reference.RFC.2181'?>

      <?rfc include='reference.RFC.1034'?>

      <reference anchor="Ref.Bellovin"
                 target="https://www.cs.columbia.edu/~smb/papers/dnshack.pdf">
        <front>
          <title abbrev="">Using the Domain Name System for System
          Break-Ins</title>

          <author fullname="Steven M. Bellovin" initials="S."
                  surname="Bellovin">
            <organization/>
          </author>

          <date year="1995"/>
        </front>
      </reference>
    </references>

    <!--
        <references title="Informative References">
        </references>
    -->

    <section title="Changes / Author Notes.">
      <t>[RFC Editor: Please remove this section before publication ]</t>

      <t>From -00 to -01.</t>

      <t><list style="symbols">
          <t>Nothing changed in the template!</t>
        </list></t>
    </section>
  </back>
</rfc>
